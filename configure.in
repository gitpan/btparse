dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Id: configure.in,v 1.6 1997/10/19 22:54:52 greg Rel $)
AC_INIT(bibtex.g)
AC_CONFIG_HEADER(bt_config.h btparse.h)

# Check for various programs.
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_CC
AC_PATH_PROG(AR, ar, "")

if test -z "$AR" ; then
  AC_MSG_ERROR(ar not found)
fi

# Check for features of those various programs.  First, see if `ar'
# supports the `s' flag; if so, we don't need ranlib.  If not, we 
# search for ranlib, and crash if it's not found.
AC_MSG_CHECKING(whether $AR supports s flag)
ARFLAGS="rsuc"
AC_SUBST(ARFLAGS)
touch conftest.file
if $AR $ARFLAGS conftest.a conftest.file 2>/dev/null ; then
  AC_MSG_RESULT(yes)
  RANLIB=""
else
  AC_MSG_RESULT(no)
  ARFLAGS="ruc"
  AC_PROG_RANLIB
  if test -z "$RANLIB" ; then
    AC_MSG_ERROR($AR does not support s flag and ranlib not found)
  fi
fi

dnl MNI_ANSI_CC(cc,cflags,action-if-ok,action-if-not-ok)
dnl checks that the C compiler named by `cc', when run with `cflags',
dnl is fairly ANSI-compliant.  (So far just checks that you can
dnl typedef an enum, declared a `signed char', and declare a prototype.)

AC_DEFUN(MNI_CHECK_ANSI_CC,[
save_cc=$CC
save_cflags=$CFLAGS
CC=$1
CFLAGS=$2
AC_TRY_COMPILE([
typedef enum { RED, GREEN, BLUE, YELLOW, BLACK } colour;
], [
signed char signed_char_name;

void *foo (colour C);
colour a = GREEN;
 
foo (a);
], $3, $4)
CC=$save_cc
CFLAGS=$save_cflags
])

# Next, see if the C compiler appears ANSI-compliant using MNI_ANSI_CC
AC_CACHE_CHECK([that \"$CC $CFLAGS\" has enough ANSI in it],
btparse_cv_cc_ansi,[
MNI_CHECK_ANSI_CC($CC,$CFLAGS,btparse_cv_cc_ansi=yes,btparse_cv_cc_ansi=no)
])
if test "$btparse_cv_cc_ansi" = "no" ; then 
  AC_MSG_ERROR(an ANSI-compliant C compiler is required to build btparse)
fi


# Generate CFLAGS2 (for compiling PCCTS source files), and add warning
# options to CFLAGS.
CFLAGS2=$CFLAGS
AC_SUBST(CFLAGS2)
if test "$ac_cv_prog_gcc" = "yes" ; then
  CFLAGS="$CFLAGS -Wall"
fi


# Look for Perl 5.004 or greater -- if found, assume the user is going 
# to build Text::BibTeX next, and look out for any problems they might
# encounter

version_test_prog="'"'exit ($] <= 5.004)'"'"
AC_MSG_CHECKING(for Perl 5.004 or greater)
AC_CACHE_VAL(btparse_cv_perl,[
candidates=""
for dir in `echo $PATH | tr ':' ' '` ; do
  expansions=`echo $dir/perl $dir/perl5* 2>/dev/null`
  if test $? -eq 0 ; then
    for exp in $expansions ; do
      if test -f $exp ; then
        candidates="$candidates $exp"
      fi
    done
  fi
done

for perl in $candidates ; do
  if test -z "$btparse_cv_perl" ; then
#    echo "trying $perl -e $version_test_prog"
    if eval "$perl -e $version_test_prog" ; then
#      echo "we have a winner"
      btparse_cv_perl=$perl
#    else
#      echo "sorry, please try again"
    fi
  fi
done
])

PERL=$btparse_cv_perl
AC_SUBST(PERL)
if test -z "$PERL" ; then
  AC_MSG_RESULT(not found)
  AC_MSG_RESULT(assuming you won't be building the Text::BibTeX extension)
else
  AC_MSG_RESULT($PERL)
  AC_MSG_CHECKING(compiler used to build Perl)

  # Note that the Autoconf/GNU 'cflags' means subtly different things from
  # Perl's 'ccflags'.  For GNU stuff, 'cflags' consists of all flags that
  # are just for the C compiler, and not the preprocessor (eg. debugging,
  # optimization, "put the compiler in ANSI mode", etc.).  For Perl,
  # 'ccflags' and 'cppflags' both contain pre-processor flags (-I, -D), but
  # presumably 'cflags' can also contain non-preprocessor flags.  Perl also
  # has the 'optimize' variable, which contains '-g' or '-O' or whatever.
  # For the time being, I'm going to assume people treat 'optimize'
  # properly, and only put -g/-O type flags into it; the important flags
  # that control compiler behaviour (eg. ANSI or traditional) are assumed
  # to be in 'ccflags'.

  perl_cc=`$PERL -MConfig -e 'print $Config{cc}'`
  perl_gcc=`$PERL -MConfig -e 'print $Config{gcc} || $Config{gccversion} ? "yes" : "no"'`
  msg="$perl_cc"
  if test "$perl_gcc" = "no" ; then msg="$msg (not gcc)" ; fi
  if test "$perl_gcc" = "yes" -a $perl_cc != "gcc" ; then msg="$msg (it's gcc)" ; fi

  AC_MSG_RESULT($perl_cc)
  if test -z "$perl_cc" ; then
    AC_MSG_ERROR(couldn't get compiler used to build Perl)
  fi

  if test "$ac_cv_prog_gcc" = "yes" -a "$perl_gcc" = "no" ; then
    AC_MSG_WARN([using gcc to build btparse, but something else was used to build Perl -- defining NDEBUG])
    CPPFLAGS="$CPPFLAGS -DNDEBUG"
  fi

  AC_MSG_CHECKING(various other Perl configuration parameters)
  perl_ccflags=`$PERL -MConfig -e 'print $Config{ccflags}'`
  perl_cppflags=`$PERL -MConfig -e 'print $Config{cppflags}'`
  perl_archlib=`$PERL -MConfig -e 'print $Config{archlib}'`
  perl_inc="$perl_archlib/CORE"
  AC_MSG_RESULT(got 'em)

  if test ! -d "$perl_inc" -o ! -f "$perl_inc/perl.h" ; then
    AC_MSG_WARN(couldn't find $perl_inc (or it's missing perl.h); you will have problems building Text::BibTeX)
  fi

  AC_CACHE_CHECK([if compiler used to build Perl has enough ANSI in it],
btparse_cv_perl_cc_ansi,[
MNI_CHECK_ANSI_CC($perl_cc,$perl_ccflags,
                  btparse_cv_perl_cc_ansi=yes,btparse_cv_perl_cc_ansi=no)
])
  if test "$btparse_cv_perl_cc_ansi" = "no" ; then
    AC_MSG_WARN(\"$perl_cc $perl_ccflags\" is not ANSI-compliant; you will have to override this and use \"$CC $CFLAGS $perl_cppflags\" to build Text::BibTeX)
    perl_cc=$CC
    perl_ccflags="$CFLAGS $perl_cppflags"
  fi

  AC_MSG_CHECKING(for ushort when compiling XSUBs)
AC_CACHE_VAL(btparse_cv_type_ushort_xsub, [
save_cc=$CC
save_cflags=$CFLAGS
CC=$perl_cc
CFLAGS="$perl_ccflags -I$perl_inc"
# echo "(compiling with \"$CC $CFLAGS\")"
AC_TRY_COMPILE([
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#if 0       /* remove autoconf's main */
],[
#endif
int t() {   /* replace the last #if'd out line */
ushort i;
], btparse_cv_type_ushort_xsub=yes, btparse_cv_type_ushort_xsub=no)
CC=$save_cc
CFLAGS=$save_cflags
])
  AC_MSG_RESULT($btparse_cv_type_ushort_xsub)
  if test "$btparse_cv_type_ushort_xsub" = "yes" ; then 
    AC_DEFINE(HAVE_USHORT_XSUB)
  fi
fi

# Check for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h)

AC_MSG_CHECKING(for ushort in <sys/types.h>)
AC_CACHE_VAL(btparse_cv_type_ushort, [
AC_TRY_COMPILE([
#include <sys/types.h>
],[
ushort i;
], btparse_cv_type_ushort=yes, btparse_cv_type_ushort=no)])
AC_MSG_RESULT($btparse_cv_type_ushort)
if test "$btparse_cv_type_ushort" = "yes" ; then 
  AC_DEFINE(HAVE_USHORT)
fi

AC_MSG_CHECKING(for boolean in <sys/types.h>)
AC_CACHE_VAL(btparse_cv_type_boolean, [
AC_TRY_COMPILE([
#include <sys/types.h>
],[
boolean f;
], btparse_cv_type_boolean=yes, btparse_cv_type_boolean=no)])
AC_MSG_RESULT($btparse_cv_type_boolean)
if test "$btparse_cv_type_boolean" = "yes" ; then 
  AC_DEFINE(HAVE_BOOLEAN)
fi

AC_MSG_CHECKING(for strdup declaration in <string.h>)
dnl AC_CACHE_VAL(btparse_cv_decl_strdup, [
dnl AC_EGREP_HEADER(strdup *\(, string.h, 
dnl btparse_cv_decl_strdup=yes, btparse_cv_decl_strdup=no)])
AC_EGREP_HEADER([strdup *\(], string.h, btparse_cv_decl_strdup=yes, btparse_cv_decl_strdup=no)
AC_MSG_RESULT($btparse_cv_decl_strdup)
if test "$btparse_cv_decl_strdup" = "yes" ; then 
  AC_DEFINE(HAVE_STRDUP_DECL)
fi


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(strdup strlwr strupr)

AC_CHECK_FUNC(getopt_long_only, gnu_getopt=yes, gnu_getopt=no)
if test "$gnu_getopt" = "no" ; then
  GETOPT_SRC="getopt.c getopt1.c"
fi
AC_SUBST(GETOPT_SRC)

AC_OUTPUT(Makefile.defs progs/Makefile)
